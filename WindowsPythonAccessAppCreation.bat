SET /P flaskappnanme=Flask Application Name:
:: Install Python
:: ... idkhowtoinstallpythonviacommandlineonwindows
:: Install cURL
:: ... cURL is PreInstalled on Windows 10 v 1803; For Older Windows Versions Installing GIT will effectively Install cURL
:: Install PIP
:: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
:: python get-pip.py

SET diruser=%CD%

cd %diruser%
mkdir %flaskappnanme%

SET f=%diruser%\%flaskappnanme%

cd %f%
mkdir app
cd %f%\app
echo. > "%f%\app\__init__.py"
cd %f%\app
mkdir transaction
cd %f%
echo. > "%f%\app\transaction\__init__.py"
cd %f%\app
mkdir bill
cd %f%
echo. > "%f%\app\bill\__init__.py"
cd %f%\app
mkdir product
cd %f%
echo. > "%f%\app\product\__init__.py"
cd %f%\app
mkdir customer
cd %f%
echo. > "%f%\app\customer\__init__.py"
cd %f%\app
mkdir address
cd %f%
echo. > "%f%\app\address\__init__.py"
cd %f%\app
mkdir user
cd %f%
echo. > "%f%\app\user\__init__.py"
cd %f%\app
mkdir jwt
cd %f%
echo. > "%f%\app\jwt\__init__.py"
cd %f%

echo flask > "%f%\requirements.txt"
echo flask-restplus >> "%f%\requirements.txt"
echo flask-sqlalchemy >> "%f%\requirements.txt"
echo flask-marshmallow >> "%f%\requirements.txt"
echo sqlalchemy >> "%f%\requirements.txt"
echo Flask-Admin >> "%f%\requirements.txt"
echo PyJWT >> "%f%\requirements.txt"
echo requests >> "%f%\requirements.txt"
echo marshmallow-sqlalchemy >> "%f%\requirements.txt"
echo gunicorn >> "%f%\requirements.txt"
echo jinja2 >> "%f%\requirements.txt"
echo healthcheck >> "%f%\requirements.txt"
echo psycopg2-binary >> "%f%\requirements.txt"
echo pyodbc >> "%f%\requirements.txt"
echo comtypes >> "%f%\requirements.txt"
echo pypyodbc >> "%f%\requirements.txt"

cd %f%
python -m pip3 install --upgrade pipenv
cd %f%
python -m pipenv --version
cd %f%
python -m pipenv install -r requirements.txt
cd %f%

echo import os > "%f%\wsgi.py"
echo from app.server import create_app >> "%f%\wsgi.py"
echo. >> "%f%\wsgi.py"
echo # Get environment from variable >> "%f%\wsgi.py"
echo env = os.getenv('ENV', 'LOCAL') >> "%f%\wsgi.py"
echo debug = os.getenv('BRANDI_DEBUG') >> "%f%\wsgi.py"
echo. >> "%f%\wsgi.py"
echo application = create_app(env=env) >> "%f%\wsgi.py"
echo. >> "%f%\wsgi.py"
echo if __name__ == "__main__": >> "%f%\wsgi.py"
echo     application.run(debug=debug) >> "%f%\wsgi.py"

cd %f%

echo export DATABASE_ENGINE=postgresql > "%f%\start_using_psql.py"
echo. >> "%f%\start_using_psql.py"
echo python3 wsgi.py >> "%f%\start_using_psql.py"

cd %f%\app

echo from flask_restplus import Api > "%f%\app\singletons.py"
echo from flask_sqlalchemy import SQLAlchemy >> "%f%\app\singletons.py"
echo from flask_marshmallow import Marshmallow >> "%f%\app\singletons.py"
echo. >> "%f%\app\singletons.py"
echo api = Api( >> "%f%\app\singletons.py"
echo     title='Transaction API', >> "%f%\app\singletons.py"
echo     version='1.0', >> "%f%\app\singletons.py"
echo     description='Transaction API' >> "%f%\app\singletons.py"
echo ) >> "%f%\app\singletons.py"
echo. >> "%f%\app\singletons.py"
echo db = SQLAlchemy() >> "%f%\app\singletons.py"
echo ma = Marshmallow() >> "%f%\app\singletons.py"

cd %f%\app

echo import os > "%f%\app\server.py"
echo import sys >> "%f%\app\server.py"
echo from flask import Flask >> "%f%\app\server.py"
echo from flask_admin import Admin >> "%f%\app\server.py"
echo from flask_admin.contrib.sqla import ModelView >> "%f%\app\server.py"
echo from app.transaction.models import Transaction >> "%f%\app\server.py"
echo from app.bill.models import Bill >> "%f%\app\server.py"
echo from app.product.models import Product >> "%f%\app\server.py"
echo from app.customer.models import Customer >> "%f%\app\server.py"
echo from app.address.models import Address >> "%f%\app\server.py"
echo from app.user.models import User >> "%f%\app\server.py"
echo from app.transaction.resource import api as transaction_api >> "%f%\app\server.py"
echo from app.bill.resource import api as bill_api >> "%f%\app\server.py"
echo from app.product.resource import api as product_api >> "%f%\app\server.py"
echo from app.customer.resource import api as customer_api >> "%f%\app\server.py"
echo from app.address.resource import api as address_api >> "%f%\app\server.py"
echo from app.user.resource import api as user_api >> "%f%\app\server.py"
echo from app.jwt.resource import api as jwt_api >> "%f%\app\server.py"
echo from app.singletons import db, api, ma >> "%f%\app\server.py"
echo from healthcheck import HealthCheck >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo DB_NAME = 'app.db' >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo def config(): >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     # Get Service Name from the environment variable >> "%f%\app\server.py"
echo     service_name = os.getenv('DATABASE_SERVICE_NAME', '').upper().replace('-', '_') >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     engine = os.getenv('DATABASE_ENGINE', 'sqlite') >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     if engine == 'postgresql': >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo         print('using postgresql configuration...') >> "%f%\app\server.py"
echo         engine = os.getenv('DATABASE_ENGINE').lower() >> "%f%\app\server.py"
echo         name = os.getenv('DATABASE_NAME') >> "%f%\app\server.py"
echo         user = os.getenv('DATABASE_USER') >> "%f%\app\server.py"
echo         password = os.getenv('DATABASE_PASSWORD') >> "%f%\app\server.py"
echo         host = os.getenv('{}_SERVICE_HOST'.format(service_name)) >> "%f%\app\server.py"
echo         port = os.getenv('{}_SERVICE_PORT_POSTGRESQL'.format(service_name)) >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo         connection_string = f'{engine}://{user}:{password}@{host}:{port}/{name}' >> "%f%\app\server.py"
echo         print(f'connecting to db using {connection_string}') >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo         return connection_string >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     else: >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo         print('using sqlite configuration...') >> "%f%\app\server.py"
echo         basedir = os.path.abspath(os.path.dirname(__file__)) >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo         # if 'win32' (Windows) or 'cygwin' (Windows) then 3 slashes >> "%f%\app\server.py"
echo         if sys.platform == 'win32' or sys.platform == 'cygwin': >> "%f%\app\server.py"
echo             return f'{engine}:///{os.path.join(basedir, DB_NAME)}' >> "%f%\app\server.py"
echo         # else 'linux' (Linux) or 'darwin' (Mac OS) then 4 slashes >> "%f%\app\server.py"
echo         else: >> "%f%\app\server.py"
echo             return f'{engine}:////{os.path.join(basedir, DB_NAME)}' >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo def create_app(env=None): >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     # initialize app >> "%f%\app\server.py"
echo     app = Flask(__name__) >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     # Configure the SqlAlchemy part of the app instance >> "%f%\app\server.py"
echo     app.config["SQLALCHEMY_ECHO"] = False >> "%f%\app\server.py"
echo     app.config["SQLALCHEMY_DATABASE_URI"] = config() >> "%f%\app\server.py"
echo     app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     # set app for db >> "%f%\app\server.py"
echo     db.init_app(app) >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     # Delete database file if it exists currently >> "%f%\app\server.py"
echo     if os.path.exists(DB_NAME): >> "%f%\app\server.py"
echo         os.remove(DB_NAME) >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     # Create the database >> "%f%\app\server.py"
echo     with app.app_context(): >> "%f%\app\server.py"
echo         db.create_all() >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     # set app for api >> "%f%\app\server.py"
echo     api.init_app(app) >> "%f%\app\server.py"
echo     api.add_namespace(transaction_api) >> "%f%\app\server.py"
echo     api.add_namespace(bill_api) >> "%f%\app\server.py"
echo     api.add_namespace(product_api) >> "%f%\app\server.py"
echo     api.add_namespace(customer_api) >> "%f%\app\server.py"
echo     api.add_namespace(address_api) >> "%f%\app\server.py"
echo     api.add_namespace(user_api) >> "%f%\app\server.py"
echo     api.add_namespace(jwt_api) >> "%f%\app\server.py"
echo     # set app for marshmallow >> "%f%\app\server.py"
echo     ma.init_app(app) >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     # Initialize Health Check >> "%f%\app\server.py"
echo     health = HealthCheck(app, "/health") >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     #set optional bootswatch theme >> "%f%\app\server.py"
echo     #app.config['FLASK_ADMIN_SWATCH'] = 'cerulean' >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     admin = Admin(app, name='Flask-Admin Page', template_mode='bootstrap3') >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     # Add administrative views here >> "%f%\app\server.py"
echo     admin.add_view(ModelView(Transaction, db.session)) >> "%f%\app\server.py"
echo     admin.add_view(ModelView(Bill, db.session)) >> "%f%\app\server.py"
echo     admin.add_view(ModelView(Product, db.session)) >> "%f%\app\server.py"
echo     admin.add_view(ModelView(Customer, db.session)) >> "%f%\app\server.py"
echo     admin.add_view(ModelView(Address, db.session)) >> "%f%\app\server.py"
echo     admin.add_view(ModelView(User, db.session)) >> "%f%\app\server.py"
echo. >> "%f%\app\server.py"
echo     return app >> "%f%\app\server.py"

cd %f%\app\jwt

echo import requests > "%f%\app\jwt\service.py"
echo import jwt >> "%f%\app\jwt\service.py"
echo import uuid >> "%f%\app\jwt\service.py"
echo. >> "%f%\app\jwt\service.py"
echo def get_jwt_access_token(usernameFromInput, passwordFromInput): >> "%f%\app\jwt\service.py"
echo. >> "%f%\app\jwt\service.py"
echo     data = { >> "%f%\app\jwt\service.py"
echo         'username': usernameFromInput, >> "%f%\app\jwt\service.py"
echo         'passsword': usernameFromInput, >> "%f%\app\jwt\service.py"
echo     } >> "%f%\app\jwt\service.py"
echo. >> "%f%\app\jwt\service.py"
echo #secret = str(uuid.uuid4()) >> "%f%\app\jwt\service.py"
echo secret = 'secret' >> "%f%\app\jwt\service.py"
echo. >> "%f%\app\jwt\service.py"
echo #response = requests.post('https://website.com/get/token', data=data, verify=False).json() >> "%f%\app\jwt\service.py"
echo access_token = jwt.encode(data, secret, algorithm='HS256') >> "%f%\app\jwt\service.py"
echo. >> "%f%\app\jwt\service.py"
echo response = access_token.json() >> "%f%\app\jwt\service.py"
echo. >> "%f%\app\jwt\service.py"
echo return response >> "%f%\app\jwt\service.py"

cd %f%\app\jwt

echo from flask import request > "%f%\app\jwt\resource.py"
echo from flask_restplus import Namespace, Resource, fields >> "%f%\app\jwt\resource.py"
echo from app.jwt.service import get_jwt_access_token >> "%f%\app\jwt\resource.py"
echo. >> "%f%\app\jwt\resource.py"
echo api = Namespace('jwt', description='JWT API') >> "%f%\app\jwt\resource.py"
echo. >> "%f%\app\jwt\resource.py"
echo model_jwt = api.model('JWT Model', { >> "%f%\app\jwt\resource.py"
echo     'username': fields.String(required=True, description="Username", help="username cannot be blank."), >> "%f%\app\jwt\resource.py"
echo     'password': fields.String(required=True, description="Password", help="password cannot be blank.") >> "%f%\app\jwt\resource.py"
echo } >> "%f%\app\jwt\resource.py"
echo. >> "%f%\app\jwt\resource.py"
echo @api.route('') >> "%f%\app\jwt\resource.py"
echo class JWTResource(Resource): >> "%f%\app\jwt\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}) >> "%f%\app\jwt\resource.py"
echo     @api.expect(model_jwt) >> "%f%\app\jwt\resource.py"
echo     def post(self): >> "%f%\app\jwt\resource.py"
echo         try: >> "%f%\app\jwt\resource.py"
echo             json_string = request.json >> "%f%\app\jwt\resource.py"
echo             if not json_string: >> "%f%\app\jwt\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\jwt\resource.py"
echo             return get_jwt_access_token(json_string['username'], json_string['password']) >> "%f%\app\jwt\resource.py"
echo         except KeyError as e: >> "%f%\app\jwt\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\jwt\resource.py"
echo         except KeyError as e: >> "%f%\app\jwt\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\jwt\resource.py"

cd %f%\app\transaction

echo from app.singletons import db > "%f%\app\transaction\models.py"
echo. >> "%f%\app\transaction\models.py"
echo. >> "%f%\app\transaction\models.py"
echo class Transaction(db.Model): >> "%f%\app\transaction\models.py"
echo. >> "%f%\app\transaction\models.py"
echo     __tablename__ = 'transaction' >> "%f%\app\transaction\models.py"
echo. >> "%f%\app\transaction\models.py"
echo     transaction_id = db.Column(db.String, primary_key=True) >> "%f%\app\transaction\models.py"
echo     first_name = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     last_name = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     bill_id = db.Column(db.String, db.ForeignKey('bill.code')) >> "%f%\app\transaction\models.py"
echo     bill = db.relationship('Bill') >> "%f%\app\transaction\models.py"
echo     product_id = db.Column(db.String, db.ForeignKey('product.code')) >> "%f%\app\transaction\models.py"
echo     product = db.relationship('Product') >> "%f%\app\transaction\models.py"
echo     customer_id = db.Column(db.String, db.ForeignKey('customer.code')) >> "%f%\app\transaction\models.py"
echo     customer = db.relationship('Customer') >> "%f%\app\transaction\models.py"
echo     id = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     middle_initial = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     social_security_number = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     phone_number = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     dob = db.Column(db.Date, nullable=False) >> "%f%\app\transaction\models.py"
echo     sex = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     active_service_date = db.Column(db.Date, nullable=False) >> "%f%\app\transaction\models.py"
echo     arrival_date = db.Column(db.Date, nullable=False) >> "%f%\app\transaction\models.py"
echo     dmsl = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     gt_score = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     contract_acquistion = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     emergency_contact_first_name = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     emergency_contact_last_name = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     emergency_contact_phone_number = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     emergency_contact_relationship = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     time_standard = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     attended = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     failure_code = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     failure_comment = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     datetime_creation = db.Column(db.TIMESTAMP, server_default=db.func.current_timestamp(), nullable=False) >> "%f%\app\transaction\models.py"
echo     datetime_update = db.Column(db.TIMESTAMP, server_default=db.func.current_timestamp(), onupdate=db.func.current_timestamp(), nullable=False) >> "%f%\app\transaction\models.py"
echo     home_of_record = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     arrived_from = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     has_dependents = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     ranger_regiment_discovered = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     is_tdy = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     tdy_unit = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     played_sports = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     sports_played = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     has_hot_weather_injury = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     has_cold_weather_injury = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     has_physical = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     has_airborne = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     has_ranger_sof_affiliations = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     has_glasses = db.Column(db.Boolean, nullable=False) >> "%f%\app\transaction\models.py"
echo     success_factors = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     success_motivators = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"
echo     bad_habits = db.Column(db.String, nullable=False) >> "%f%\app\transaction\models.py"

cd %f%\app\transaction

echo from marshmallow import Schema, fields, post_load > "%f%\app\transaction\schemas.py"
echo from app.transaction.models import Transaction >> "%f%\app\transaction\schemas.py"
echo from app.bill.schemas import BillSchema >> "%f%\app\transaction\schemas.py"
echo from app.product.schemas import ProductSchema >> "%f%\app\transaction\schemas.py"
echo from app.customer.schemas import CustomerSchema >> "%f%\app\transaction\schemas.py"
echo. >> "%f%\app\transaction\schemas.py"
echo. >> "%f%\app\transaction\schemas.py"
echo class TransactionSchema(Schema): >> "%f%\app\transaction\schemas.py"
echo. >> "%f%\app\transaction\schemas.py"
echo     transaction_id = fields.String() >> "%f%\app\transaction\schemas.py"
echo     first_name = fields.String() >> "%f%\app\transaction\schemas.py"
echo     last_name = fields.String() >> "%f%\app\transaction\schemas.py"
echo     bill = fields.Nested(BillSchema) >> "%f%\app\transaction\schemas.py"
echo     product = fields.Nested(ProductSchema) >> "%f%\app\transaction\schemas.py"
echo     customer = fields.Nested(CustomerSchema) >> "%f%\app\transaction\schemas.py"
echo     id = fields.String() >> "%f%\app\transaction\schemas.py"
echo     middle_initial = fields.String() >> "%f%\app\transaction\schemas.py"
echo     social_security_number = fields.String() >> "%f%\app\transaction\schemas.py"
echo     phone_number = fields.String() >> "%f%\app\transaction\schemas.py"
echo     dob = fields.Date() >> "%f%\app\transaction\schemas.py"
echo     sex = fields.String() >> "%f%\app\transaction\schemas.py"
echo     active_service_date = fields.Date() >> "%f%\app\transaction\schemas.py"
echo     arrival_date = fields.Date() >> "%f%\app\transaction\schemas.py"
echo     dmsl = fields.String() >> "%f%\app\transaction\schemas.py"
echo     gt_score = fields.String() >> "%f%\app\transaction\schemas.py"
echo     contract_acquistion = fields.String() >> "%f%\app\transaction\schemas.py"
echo     emergency_contact_first_name = fields.String() >> "%f%\app\transaction\schemas.py"
echo     emergency_contact_last_name = fields.String() >> "%f%\app\transaction\schemas.py"
echo     emergency_contact_phone_number = fields.String() >> "%f%\app\transaction\schemas.py"
echo     emergency_contact_relationship = fields.String() >> "%f%\app\transaction\schemas.py"
echo     time_standard = fields.String() >> "%f%\app\transaction\schemas.py"
echo     attended = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     failure_code = fields.String() >> "%f%\app\transaction\schemas.py"
echo     failure_comment = fields.String() >> "%f%\app\transaction\schemas.py"
echo     datetime_creation = fields.DateTime() >> "%f%\app\transaction\schemas.py"
echo     datetime_update = fields.DateTime() >> "%f%\app\transaction\schemas.py"
echo     home_of_record = fields.String() >> "%f%\app\transaction\schemas.py"
echo     arrived_from = fields.String() >> "%f%\app\transaction\schemas.py"
echo     has_dependents = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     ranger_regiment_discovered = fields.String() >> "%f%\app\transaction\schemas.py"
echo     is_tdy = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     tdy_unit = fields.String() >> "%f%\app\transaction\schemas.py"
echo     played_sports = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     sports_played = fields.String() >> "%f%\app\transaction\schemas.py"
echo     has_hot_weather_injury = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     has_cold_weather_injury = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     has_physical = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     has_airborne = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     has_ranger_sof_affiliations = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     has_glasses = fields.Boolean() >> "%f%\app\transaction\schemas.py"
echo     success_factors = fields.String() >> "%f%\app\transaction\schemas.py"
echo     success_motivators = fields.String() >> "%f%\app\transaction\schemas.py"
echo     bad_habits = fields.String() >> "%f%\app\transaction\schemas.py"
echo. >> "%f%\app\transaction\schemas.py"
echo     @post_load >> "%f%\app\transaction\schemas.py"
echo     def make_transaction(self, data, **kwargs): >> "%f%\app\transaction\schemas.py"
echo         return Transaction(**data) >> "%f%\app\transaction\schemas.py"

cd %f%\app\transaction

echo from app.singletons import db > "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo class TransactionRepository: >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo     def read_all(self, transaction): >> "%f%\app\transaction\repository.py"
echo         return transaction.query.all() >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo     def read_one(self, transaction_id, transaction): >> "%f%\app\transaction\repository.py"
echo         return transaction.query.filter(transaction.transaction_id == transaction_id).one_or_none() >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo     def create(self, transaction): >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo         # Add the user to the database >> "%f%\app\transaction\repository.py"
echo         db.session.add(transaction) >> "%f%\app\transaction\repository.py"
echo         db.session.commit() >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo     def update(self, existing_transaction, updated_transaction): >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo         # Set the id to the user we want to update >> "%f%\app\transaction\repository.py"
echo         updated_transaction.transaction_id = existing_transaction.transaction_id >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo         # merge the new object into the old and commit it to the db >> "%f%\app\transaction\repository.py"
echo         db.session.merge(updated_transaction) >> "%f%\app\transaction\repository.py"
echo         db.session.commit() >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo     def delete(self, transaction): >> "%f%\app\transaction\repository.py"
echo. >> "%f%\app\transaction\repository.py"
echo         db.session.delete(transaction) >> "%f%\app\transaction\repository.py"
echo         db.session.commit() >> "%f%\app\transaction\repository.py"

cd %f%\app\transaction

echo from app.transaction.models import Transaction > "%f%\app\transaction\service.py"
echo from app.transaction.schemas import TransactionSchema >> "%f%\app\transaction\service.py"
echo from app.transaction.repository import TransactionRepository >> "%f%\app\transaction\service.py"
echo from flask import abort, make_response >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo repository_transaction = TransactionRepository() >> "%f%\app\transaction\service.py"
echo schema_transaction = TransactionSchema() >> "%f%\app\transaction\service.py"
echo many_schema_transaction = TransactionSchema(many=True) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo class TransactionService: >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo     def create(self, transaction_json): >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Create a transaction instance using the schema and the passed in transaction >> "%f%\app\transaction\service.py"
echo         new_transaction = schema_transaction.load(transaction_json) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Determine if record with id exists >> "%f%\app\transaction\service.py"
echo         existing_transaction = repository_transaction.read_one(transaction_id=new_transaction.transaction_id, transaction=Transaction) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Can we insert this record? >> "%f%\app\transaction\service.py"
echo         if existing_transaction is None: >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo             # Add the object to the database >> "%f%\app\transaction\service.py"
echo             repository_transaction.create(new_transaction) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo             # Serialize and return the newly created object in the response >> "%f%\app\transaction\service.py"
echo             data = schema_transaction.dump(new_transaction) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo             return data, 201 >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Otherwise, nope, user exists already >> "%f%\app\transaction\service.py"
echo         else: >> "%f%\app\transaction\service.py"
echo             abort(409, f'Transaction with DOD ID {new_transaction.transaction_id} exists already') >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo     def update(self, transaction_id, transaction_json): >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Determine if record with id exists >> "%f%\app\transaction\service.py"
echo         existing_transaction = repository_transaction.read_one(transaction_id=transaction_id, transaction=Transaction) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Did we find an existing transaction? >> "%f%\app\transaction\service.py"
echo         if existing_transaction is not None: >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo             # Create a transaction instance using the schema and the passed in transaction >> "%f%\app\transaction\service.py"
echo             updated_transaction = schema_transaction.load(transaction_json) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo             # Update transaction in db >> "%f%\app\transaction\service.py"
echo             repository_transaction.update(existing_transaction, updated_transaction) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo             # return updated user in the response >> "%f%\app\transaction\service.py"
echo             data = schema_transaction.dump(updated_transaction) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo             return data, 200 >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\transaction\service.py"
echo         else: >> "%f%\app\transaction\service.py"
echo             abort(404, f"User not found for Id: {transaction_id}") >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo     def delete(self, transaction_id): >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Get the transaction requested >> "%f%\app\transaction\service.py"
echo         existing_transaction = Transaction.query.filter(Transaction.transaction_id == transaction_id).one_or_none() >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Did we find a transaction? >> "%f%\app\transaction\service.py"
echo         if existing_transaction is not None: >> "%f%\app\transaction\service.py"
echo             repository_transaction.delete(existing_transaction) >> "%f%\app\transaction\service.py"
echo             return make_response(f"User {transaction_id} deleted", 200) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Otherwise, nope, didn't find that transaction >> "%f%\app\transaction\service.py"
echo         else: >> "%f%\app\transaction\service.py"
echo             abort(404, f"Transaction not found for Id: {transaction_id}") >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo     def get_by_id(self, transaction_id): >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Determine if a transaction with id exists >> "%f%\app\transaction\service.py"
echo         existing_transaction = repository_transaction.read_one(transaction_id=transaction_id, transaction=Transaction) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Did we find a transaction? >> "%f%\app\transaction\service.py"
echo         if existing_transaction is not None: >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo             return  schema_transaction.dump(existing_transaction) >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\transaction\service.py"
echo         else: >> "%f%\app\transaction\service.py"
echo             abort(404, f"transaction not found for Id: {transaction_id}") >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo     def get_all(self): >> "%f%\app\transaction\service.py"
echo. >> "%f%\app\transaction\service.py"
echo         # Get all transactions in db >> "%f%\app\transaction\service.py"
echo         transactions = repository_transaction.read_all(Transaction) >> "%f%\app\transaction\service.py"
echo         return many_schema_transaction.dump(transactions) >> "%f%\app\transaction\service.py"

cd %f%\app\transaction

echo from flask import request > "%f%\app\transaction\resource.py"
echo from flask_restplus import Namespace, Resource, fields >> "%f%\app\transaction\resource.py"
echo from app.transaction.service import TransactionService >> "%f%\app\transaction\resource.py"
echo from app.bill.resource import model_bill >> "%f%\app\transaction\resource.py"
echo from app.product.resource import model_product >> "%f%\app\transaction\resource.py"
echo from app.customer.resource import model_customer >> "%f%\app\transaction\resource.py"
echo import os, sys >> "%f%\app\transaction\resource.py"
echo from datetime import datetime >> "%f%\app\transaction\resource.py"
echo import pypyodbc >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo api = Namespace('transactions', description='Transaction API') >> "%f%\app\transaction\resource.py"
echo service = TransactionService() >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo model_transaction = api.model('Transaction Model', { >> "%f%\app\transaction\resource.py"
echo     'transaction_id': fields.String(required=True, description="transaction ID of the Transaction", help="transaction_id cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'last_name': fields.String(required=True, description="Last Name of the Transaction", help="last_name cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'first_name': fields.String(required=True, description="First Name of the Transaction", help="first_name cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'bill': fields.Nested(model_bill, required = True, description="Bill  Nested List for the Transaction.", help="bill cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'product': fields.Nested(model_product, required = True, description="Product  Nested List for the Transaction.", help="product cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'customer': fields.Nested(model_customer, required = True, description="Customer  Nested List for the Transaction.", help="customer cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'id': fields.String(required=True, description="ID of the Transaction", help="id cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'middle_initial': fields.String(required=True, description="Middle Initial of the Transaction", help="middle_initial cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'social_security_number': fields.String(required=True, description="Social Security Number of the Transaction", help="social_security_number cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'phone_number': fields.String(required=True, description="Phone Number of the Transaction", help="phone_number cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'dob': fields.Date(required=True, default='2000-01-31', description="Date Of Birth of the Transaction", help="dob cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'sex': fields.String(required=True, description="Sex of the Transaction", help="sex cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'active_service_date': fields.Date(required=True, default='2000-01-31', description="Active Service Date of the Transaction", help="active_service_date cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'arrival_date': fields.Date(required=True, default='2000-01-31', description="Arrival Date of the Transaction", help="arrival_date cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'dmsl': fields.String(required=True, description="DMSL of the Transaction", help="dmsl cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'gt_score': fields.String(required=True, description="GT Score of the Transaction", help="gt_score cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'contract_acquistion': fields.String(required=True, description="Contract Aquisition of the Transaction", help="contract_acquistion cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'emergency_contact_first_name': fields.String(required=True, description="Emergency Contact First Name of the Transaction", help="emergency_contact_first_name cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'emergency_contact_last_name': fields.String(required=True, description="Emergency Contact Last Name of the Transaction", help="emergency_contact_last_name cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'emergency_contact_phone_number': fields.String(required=True, description="Emergency Contact Phone Number of the Transaction", help="emergency_contact_phone_number cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'emergency_contact_relationship': fields.String(required=True, description="Emergency Contact Relationship of the Transaction", help="emergency_contact_relationship cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'time_standard': fields.String(required=True, description="Time Standard of the Transaction", help="time_standard cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'attended': fields.Boolean(required=True, description="True or False for the Attendance status of the Transaction", help="attended cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'failure_code': fields.String(required=True, description="Failure Code of the Transaction", help="failure_code cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'failure_comment': fields.String(required=True, description="Failure Comment of the Transaction", help="failure_comment cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'home_of_record': fields.String(required=True, description="Home of Record of the Transaction", help="home_of_record cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'arrived_from': fields.String(required=True, description="Arrived From of the Transaction", help="arrived_from cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'has_dependents': fields.Boolean(required=True, description="True or False for the Dependents status of the Transaction", help="has_dependents cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'ranger_regiment_discovered': fields.String(required=True, description="Ranger Regiment Discovered of the Transaction", help="ranger_regiment_discovered cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'is_tdy': fields.Boolean(required=True, description="True or False for the TDY status of the Transaction", help="is_tdy cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'tdy_unit': fields.String(required=True, description="TDY Unit of the Transaction", help="tdy_unit cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'played_sports': fields.Boolean(required=True, description="True or False for the Played Sports status of the Transaction", help="played_sports cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'sports_played': fields.String(required=True, description="Sports Played of the Transaction", help="sports_played cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'has_hot_weather_injury': fields.Boolean(required=True, description="True or False for the Hot Weather Injury status of the Transaction", help="has_hot_weather_injury cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'has_cold_weather_injury': fields.Boolean(required=True, description="True or False for the Cold Weather Injury status of the Transaction", help="has_cold_weather_injury cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'has_physical': fields.Boolean(required=True, description="True or False for the Physical status of the Transaction", help="has_physical cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'has_airborne': fields.Boolean(required=True, description="True or False for the Airborne status of the Transaction", help="has_airborne cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'has_ranger_sof_affiliations': fields.Boolean(required=True, description="True or False for the Ranger SOF Affiliations status of the Transaction", help="has_ranger_sof_affiliations cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'has_glasses': fields.Boolean(required=True, description="True or False for the Glasses status of the Transaction", help="has_glasses cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'success_factors': fields.String(required=True, description="Success Factors of the Transaction", help="success_factors cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'success_motivators': fields.String(required=True, description="Success Motivators of the Transaction", help="success_motivators cannot be blank."), >> "%f%\app\transaction\resource.py"
echo     'bad_habits': fields.String(required=True, description="Bad Habits of the Transaction", help="bad_habits cannot be blank.") >> "%f%\app\transaction\resource.py"
echo }) >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo sql_brandi_create = """CREATE TABLE transaction (transaction_id VARCHAR(255) PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), bill_code VARCHAR(255), bill_description VARCHAR(255), product_code VARCHAR(255), product_description VARCHAR(255), customer_code VARCHAR(255), customer_description VARCHAR(255), id VARCHAR(255), middle_initial VARCHAR(255), social_security_number VARCHAR(255), phone_number VARCHAR(255), dob DATE, sex VARCHAR(255), active_service_date DATE, arrival_date DATE, dmsl VARCHAR(255), gt_score VARCHAR(255), contract_acquistion VARCHAR(255), emergency_contact_first_name VARCHAR(255), emergency_contact_last_name VARCHAR(255), emergency_contact_phone_number VARCHAR(255), emergency_contact_relationship VARCHAR(255), time_standard VARCHAR(255), attended BIT, failure_code VARCHAR(255), failure_comment VARCHAR(255), home_of_record VARCHAR(255), arrived_from VARCHAR(255), has_dependents BIT, ranger_regiment_discovered VARCHAR(255), is_tdy BIT, tdy_unit VARCHAR(255), played_sports BIT, sports_played VARCHAR(255), has_hot_weather_injury BIT, has_cold_weather_injury BIT, has_physical BIT, has_airborne BIT, has_ranger_sof_affiliations BIT, has_glasses BIT, success_factors VARCHAR(255), success_motivators VARCHAR(255), bad_habits VARCHAR(255));""" >> "%f%\app\transaction\resource.py"
echo sql_brandi_insert = """INSERT INTO [transaction] ([transaction_id], [first_name], [last_name], [bill_code], [bill_description], [product_code], [product_description], [customer_code], [customer_description], [id], [middle_initial], [social_security_number], [phone_number], [dob], [sex], [active_service_date], [arrival_date], [dmsl], [gt_score], [contract_acquistion], [emergency_contact_first_name], [emergency_contact_last_name], [emergency_contact_phone_number], [emergency_contact_relationship], [time_standard], [attended], [failure_code], [failure_comment], [home_of_record], [arrived_from], [has_dependents], [ranger_regiment_discovered], [is_tdy], [tdy_unit], [played_sports], [sports_played], [has_hot_weather_injury], [has_cold_weather_injury], [has_physical], [has_airborne], [has_ranger_sof_affiliations], [has_glasses], [success_factors], [success_motivators], [bad_habits]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)""" >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo @api.route('') >> "%f%\app\transaction\resource.py"
echo class TransactionListResource(Resource): >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo     @api.doc(responses={ 200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error' }) >> "%f%\app\transaction\resource.py"
echo     def get(self): >> "%f%\app\transaction\resource.py"
echo         try: >> "%f%\app\transaction\resource.py"
echo             return service.get_all() >> "%f%\app\transaction\resource.py"
echo         except KeyError as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\transaction\resource.py"
echo         except Exception as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}) >> "%f%\app\transaction\resource.py"
echo     @api.expect(model_transaction) >> "%f%\app\transaction\resource.py"
echo     def post(self): >> "%f%\app\transaction\resource.py"
echo         try: >> "%f%\app\transaction\resource.py"
echo             json_string = request.json >> "%f%\app\transaction\resource.py"
echo             if not json_string: >> "%f%\app\transaction\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             return service.create(json_string) >> "%f%\app\transaction\resource.py"
echo         except KeyError as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\transaction\resource.py"
echo         except Exception as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo @api.route('/^<int:transaction_id^>') >> "%f%\app\transaction\resource.py"
echo class TransactionResource(Resource): >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\transaction\resource.py"
echo                         params={'transaction_id': 'Specify the transaction_id associated with the transaction'}) >> "%f%\app\transaction\resource.py"
echo     def get(self, transaction_id): >> "%f%\app\transaction\resource.py"
echo         try: >> "%f%\app\transaction\resource.py"
echo             return service.get_by_id(transaction_id) >> "%f%\app\transaction\resource.py"
echo         except KeyError as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\transaction\resource.py"
echo         except Exception as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\transaction\resource.py"
echo                         params={'transaction_id': 'Specify the transaction_id associated with the transaction'}) >> "%f%\app\transaction\resource.py"
echo     @api.expect(model_transaction) >> "%f%\app\transaction\resource.py"
echo     def put(self, transaction_id): >> "%f%\app\transaction\resource.py"
echo         try: >> "%f%\app\transaction\resource.py"
echo             json_data = request.json >> "%f%\app\transaction\resource.py"
echo             if not json_data: >> "%f%\app\transaction\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             return service.update(transaction_id, json_data) >> "%f%\app\transaction\resource.py"
echo         except KeyError as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\transaction\resource.py"
echo         except Exception as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\transaction\resource.py"
echo                         params={'transaction_id': 'Specify the transaction_id associated with the transaction'}) >> "%f%\app\transaction\resource.py"
echo     def delete(self, transaction_id): >> "%f%\app\transaction\resource.py"
echo         try: >> "%f%\app\transaction\resource.py"
echo             return service.delete(transaction_id) >> "%f%\app\transaction\resource.py"
echo         except KeyError as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\transaction\resource.py"
echo         except Exception as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo @api.route('msaccess/') >> "%f%\app\transaction\resource.py"
echo class TransactionMSAccessListResource(Resource): >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo     @api.doc(responses={ 200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error' }) >> "%f%\app\transaction\resource.py"
echo     def post(self): >> "%f%\app\transaction\resource.py"
echo         try: >> "%f%\app\transaction\resource.py"
echo             json_string_array = service.get_all() >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             if not json_string_array: >> "%f%\app\transaction\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             brandi_project_directory = str(os.getcwd()) >> "%f%\app\transaction\resource.py"
echo             brandi_database_currenttime = datetime.now().strftime("%%Y%%m%%d%%H%%M%%S") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             mdbfilepath = '%%s\%%s_%%s' %% (brandi_project_directory, "brandi", brandi_database_currenttime) >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             connection = pypyodbc.win_create_mdb('%%s.mdb' %% (mdbfilepath)) >> "%f%\app\transaction\resource.py"
echo             connection.cursor().execute(sql_brandi_create).commit() >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             for json_string in json_string_array: >> "%f%\app\transaction\resource.py"
echo                 param_transaction_id = json_string['transaction_id'] >> "%f%\app\transaction\resource.py"
echo                 param_first_name = json_string['first_name'] >> "%f%\app\transaction\resource.py"
echo                 param_last_name = json_string['last_name'] >> "%f%\app\transaction\resource.py"
echo                 param_bill_code = json_string['bill']['code'] >> "%f%\app\transaction\resource.py"
echo                 param_bill_description = json_string['bill']['description'] >> "%f%\app\transaction\resource.py"
echo                 param_product_code = json_string['product']['code'] >> "%f%\app\transaction\resource.py"
echo                 param_product_description = json_string['product']['description'] >> "%f%\app\transaction\resource.py"
echo                 param_customer_code = json_string['customer']['code'] >> "%f%\app\transaction\resource.py"
echo                 param_customer_description = json_string['customer']['description'] >> "%f%\app\transaction\resource.py"
echo                 param_id = json_string['id'] >> "%f%\app\transaction\resource.py"
echo                 param_middle_initial = json_string['middle_initial'] >> "%f%\app\transaction\resource.py"
echo                 param_social_security_number = json_string['social_security_number'] >> "%f%\app\transaction\resource.py"
echo                 param_phone_number = json_string['phone_number'] >> "%f%\app\transaction\resource.py"
echo                 param_dob = json_string['dob'] >> "%f%\app\transaction\resource.py"
echo                 param_sex = json_string['sex'] >> "%f%\app\transaction\resource.py"
echo                 param_active_service_date = json_string['active_service_date'] >> "%f%\app\transaction\resource.py"
echo                 param_arrival_date = json_string['arrival_date'] >> "%f%\app\transaction\resource.py"
echo                 param_dmsl = json_string['dmsl'] >> "%f%\app\transaction\resource.py"
echo                 param_gt_score = json_string['gt_score'] >> "%f%\app\transaction\resource.py"
echo                 param_contract_acquistion = json_string['contract_acquistion'] >> "%f%\app\transaction\resource.py"
echo                 param_emergency_contact_first_name = json_string['emergency_contact_first_name'] >> "%f%\app\transaction\resource.py"
echo                 param_emergency_contact_last_name = json_string['emergency_contact_last_name'] >> "%f%\app\transaction\resource.py"
echo                 param_emergency_contact_phone_number = json_string['emergency_contact_phone_number'] >> "%f%\app\transaction\resource.py"
echo                 param_emergency_contact_relationship = json_string['emergency_contact_relationship'] >> "%f%\app\transaction\resource.py"
echo                 param_time_standard = json_string['time_standard'] >> "%f%\app\transaction\resource.py"
echo                 param_attended = json_string['attended'] >> "%f%\app\transaction\resource.py"
echo                 param_failure_code = json_string['failure_code'] >> "%f%\app\transaction\resource.py"
echo                 param_failure_comment = json_string['failure_comment'] >> "%f%\app\transaction\resource.py"
echo                 #param_datetime_creation = json_string['datetime_creation'] >> "%f%\app\transaction\resource.py"
echo                 #param_datetime_update = json_string['datetime_update'] >> "%f%\app\transaction\resource.py"
echo                 param_home_of_record = json_string['home_of_record'] >> "%f%\app\transaction\resource.py"
echo                 param_arrived_from = json_string['arrived_from'] >> "%f%\app\transaction\resource.py"
echo                 param_has_dependents = json_string['has_dependents'] >> "%f%\app\transaction\resource.py"
echo                 param_ranger_regiment_discovered = json_string['ranger_regiment_discovered'] >> "%f%\app\transaction\resource.py"
echo                 param_is_tdy = json_string['is_tdy'] >> "%f%\app\transaction\resource.py"
echo                 param_tdy_unit = json_string['tdy_unit'] >> "%f%\app\transaction\resource.py"
echo                 param_played_sports = json_string['played_sports'] >> "%f%\app\transaction\resource.py"
echo                 param_sports_played = json_string['sports_played'] >> "%f%\app\transaction\resource.py"
echo                 param_has_hot_weather_injury = json_string['has_hot_weather_injury'] >> "%f%\app\transaction\resource.py"
echo                 param_has_cold_weather_injury = json_string['has_cold_weather_injury'] >> "%f%\app\transaction\resource.py"
echo                 param_has_physical = json_string['has_physical'] >> "%f%\app\transaction\resource.py"
echo                 param_has_airborne = json_string['has_airborne'] >> "%f%\app\transaction\resource.py"
echo                 param_has_ranger_sof_affiliations = json_string['has_ranger_sof_affiliations'] >> "%f%\app\transaction\resource.py"
echo                 param_has_glasses = json_string['has_glasses'] >> "%f%\app\transaction\resource.py"
echo                 param_success_factors = json_string['success_factors'] >> "%f%\app\transaction\resource.py"
echo                 param_success_motivators = json_string['success_motivators'] >> "%f%\app\transaction\resource.py"
echo                 param_bad_habits = json_string['bad_habits'] >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo                 params = (param_transaction_id, param_first_name, param_last_name, param_bill_code, param_bill_description, param_product_code, param_product_description, param_customer_code, param_customer_description, param_id, param_middle_initial, param_social_security_number, param_phone_number, param_dob, param_sex, param_active_service_date, param_arrival_date, param_dmsl, param_gt_score, param_contract_acquistion, param_emergency_contact_first_name, param_emergency_contact_last_name, param_emergency_contact_phone_number, param_emergency_contact_relationship, param_time_standard, param_attended, param_failure_code, param_failure_comment, param_home_of_record, param_arrived_from, param_has_dependents, param_ranger_regiment_discovered, param_is_tdy, param_tdy_unit, param_played_sports, param_sports_played, param_has_hot_weather_injury, param_has_cold_weather_injury, param_has_physical, param_has_airborne, param_has_ranger_sof_affiliations, param_has_glasses, param_success_factors, param_success_motivators, param_bad_habits) >> "%f%\app\transaction\resource.py"
echo                 connection.cursor().execute(sql_brandi_insert, params) >> "%f%\app\transaction\resource.py"
echo                 connection.cursor().close() >> "%f%\app\transaction\resource.py"
echo                 connection.commit() >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             connection.close() >> "%f%\app\transaction\resource.py"
echo             return("MS Access TABLE rows INSERT Succeeded.") >> "%f%\app\transaction\resource.py"
echo         except KeyError as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\transaction\resource.py"
echo         except Exception as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo @api.route('msaccess/^<int:transaction_id^>') >> "%f%\app\transaction\resource.py"
echo class TransactionMSAccessResource(Resource): >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\transaction\resource.py"
echo                         params={'transaction_id': 'Specify the transaction_id associated with the transaction'}) >> "%f%\app\transaction\resource.py"
echo     def post(self, transaction_id): >> "%f%\app\transaction\resource.py"
echo         try: >> "%f%\app\transaction\resource.py"
echo             json_string = service.get_by_id(transaction_id) >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             if not json_string: >> "%f%\app\transaction\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             brandi_project_directory = str(os.getcwd()) >> "%f%\app\transaction\resource.py"
echo             brandi_database_currenttime = datetime.now().strftime("%%Y%%m%%d%%H%%M%%S") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             mdbfilepath = '%%s\%%s_%%s' %% (brandi_project_directory, "brandi", brandi_database_currenttime) >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             connection = pypyodbc.win_create_mdb('%%s.mdb' %% (mdbfilepath)) >> "%f%\app\transaction\resource.py"
echo             connection.cursor().execute(sql_brandi_create).commit() >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             param_transaction_id = json_string['transaction_id'] >> "%f%\app\transaction\resource.py"
echo             param_first_name = json_string['first_name'] >> "%f%\app\transaction\resource.py"
echo             param_last_name = json_string['last_name'] >> "%f%\app\transaction\resource.py"
echo             param_bill_code = json_string['bill']['code'] >> "%f%\app\transaction\resource.py"
echo             param_bill_description = json_string['bill']['description'] >> "%f%\app\transaction\resource.py"
echo             param_product_code = json_string['product']['code'] >> "%f%\app\transaction\resource.py"
echo             param_product_description = json_string['product']['description'] >> "%f%\app\transaction\resource.py"
echo             param_customer_code = json_string['customer']['code'] >> "%f%\app\transaction\resource.py"
echo             param_customer_description = json_string['customer']['description'] >> "%f%\app\transaction\resource.py"
echo             param_id = json_string['id'] >> "%f%\app\transaction\resource.py"
echo             param_middle_initial = json_string['middle_initial'] >> "%f%\app\transaction\resource.py"
echo             param_social_security_number = json_string['social_security_number'] >> "%f%\app\transaction\resource.py"
echo             param_phone_number = json_string['phone_number'] >> "%f%\app\transaction\resource.py"
echo             param_dob = json_string['dob'] >> "%f%\app\transaction\resource.py"
echo             param_sex = json_string['sex'] >> "%f%\app\transaction\resource.py"
echo             param_active_service_date = json_string['active_service_date'] >> "%f%\app\transaction\resource.py"
echo             param_arrival_date = json_string['arrival_date'] >> "%f%\app\transaction\resource.py"
echo             param_dmsl = json_string['dmsl'] >> "%f%\app\transaction\resource.py"
echo             param_gt_score = json_string['gt_score'] >> "%f%\app\transaction\resource.py"
echo             param_contract_acquistion = json_string['contract_acquistion'] >> "%f%\app\transaction\resource.py"
echo             param_emergency_contact_first_name = json_string['emergency_contact_first_name'] >> "%f%\app\transaction\resource.py"
echo             param_emergency_contact_last_name = json_string['emergency_contact_last_name'] >> "%f%\app\transaction\resource.py"
echo             param_emergency_contact_phone_number = json_string['emergency_contact_phone_number'] >> "%f%\app\transaction\resource.py"
echo             param_emergency_contact_relationship = json_string['emergency_contact_relationship'] >> "%f%\app\transaction\resource.py"
echo             param_time_standard = json_string['time_standard'] >> "%f%\app\transaction\resource.py"
echo             param_attended = json_string['attended'] >> "%f%\app\transaction\resource.py"
echo             param_failure_code = json_string['failure_code'] >> "%f%\app\transaction\resource.py"
echo             param_failure_comment = json_string['failure_comment'] >> "%f%\app\transaction\resource.py"
echo             #param_datetime_creation = json_string['datetime_creation'] >> "%f%\app\transaction\resource.py"
echo             #param_datetime_update = json_string['datetime_update'] >> "%f%\app\transaction\resource.py"
echo             param_home_of_record = json_string['home_of_record'] >> "%f%\app\transaction\resource.py"
echo             param_arrived_from = json_string['arrived_from'] >> "%f%\app\transaction\resource.py"
echo             param_has_dependents = json_string['has_dependents'] >> "%f%\app\transaction\resource.py"
echo             param_ranger_regiment_discovered = json_string['ranger_regiment_discovered'] >> "%f%\app\transaction\resource.py"
echo             param_is_tdy = json_string['is_tdy'] >> "%f%\app\transaction\resource.py"
echo             param_tdy_unit = json_string['tdy_unit'] >> "%f%\app\transaction\resource.py"
echo             param_played_sports = json_string['played_sports'] >> "%f%\app\transaction\resource.py"
echo             param_sports_played = json_string['sports_played'] >> "%f%\app\transaction\resource.py"
echo             param_has_hot_weather_injury = json_string['has_hot_weather_injury'] >> "%f%\app\transaction\resource.py"
echo             param_has_cold_weather_injury = json_string['has_cold_weather_injury'] >> "%f%\app\transaction\resource.py"
echo             param_has_physical = json_string['has_physical'] >> "%f%\app\transaction\resource.py"
echo             param_has_airborne = json_string['has_airborne'] >> "%f%\app\transaction\resource.py"
echo             param_has_ranger_sof_affiliations = json_string['has_ranger_sof_affiliations'] >> "%f%\app\transaction\resource.py"
echo             param_has_glasses = json_string['has_glasses'] >> "%f%\app\transaction\resource.py"
echo             param_success_factors = json_string['success_factors'] >> "%f%\app\transaction\resource.py"
echo             param_success_motivators = json_string['success_motivators'] >> "%f%\app\transaction\resource.py"
echo             param_bad_habits = json_string['bad_habits'] >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             params = (param_transaction_id, param_first_name, param_last_name, param_bill_code, param_bill_description, param_product_code, param_product_description, param_customer_code, param_customer_description, param_id, param_middle_initial, param_social_security_number, param_phone_number, param_dob, param_sex, param_active_service_date, param_arrival_date, param_dmsl, param_gt_score, param_contract_acquistion, param_emergency_contact_first_name, param_emergency_contact_last_name, param_emergency_contact_phone_number, param_emergency_contact_relationship, param_time_standard, param_attended, param_failure_code, param_failure_comment, param_home_of_record, param_arrived_from, param_has_dependents, param_ranger_regiment_discovered, param_is_tdy, param_tdy_unit, param_played_sports, param_sports_played, param_has_hot_weather_injury, param_has_cold_weather_injury, param_has_physical, param_has_airborne, param_has_ranger_sof_affiliations, param_has_glasses, param_success_factors, param_success_motivators, param_bad_habits) >> "%f%\app\transaction\resource.py"
echo             connection.cursor().execute(sql_brandi_insert, params) >> "%f%\app\transaction\resource.py"
echo             connection.cursor().close() >> "%f%\app\transaction\resource.py"
echo             connection.commit() >> "%f%\app\transaction\resource.py"
echo             connection.close() >> "%f%\app\transaction\resource.py"
echo             return("MS Access TABLE row INSERT Succeeded.") >> "%f%\app\transaction\resource.py"
echo         except KeyError as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\transaction\resource.py"
echo         except Exception as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo @api.route('msaccesscreateblankMDB/') >> "%f%\app\transaction\resource.py"
echo class MSAccessMDBemptyResource(Resource): >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo     @api.doc(responses={ 200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error' }) >> "%f%\app\transaction\resource.py"
echo     def post(self): >> "%f%\app\transaction\resource.py"
echo         try: >> "%f%\app\transaction\resource.py"
echo             brandi_project_directory = str(os.getcwd()) >> "%f%\app\transaction\resource.py"
echo             brandi_database_currenttime = datetime.now().strftime("%%Y%%m%%d%%H%%M%%S") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             mdbfilepath = '%%s\%%s_%%s' %% (brandi_project_directory, "brandi", brandi_database_currenttime) >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             connection = pypyodbc.win_create_mdb('%%s.mdb' %% (mdbfilepath)) >> "%f%\app\transaction\resource.py"
echo             #connection.cursor().execute('CREATE TABLE transaction (id VARCHAR(255) PRIMARY KEY, name VARCHAR(25));').commit() >> "%f%\app\transaction\resource.py"
echo             connection.cursor().execute(sql_brandi_create).commit() >> "%f%\app\transaction\resource.py"
echo             response_text = ".mdb File Created @ %%s" %% (mdbfilepath) >> "%f%\app\transaction\resource.py"
echo             return response_text >> "%f%\app\transaction\resource.py"
echo         except KeyError as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\transaction\resource.py"
echo         except Exception as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo @api.route('msaccesscreateblankACCDB/') >> "%f%\app\transaction\resource.py"
echo class MSAccessACCDBemptyResource(Resource): >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo     @api.doc(responses={ 200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error' }) >> "%f%\app\transaction\resource.py"
echo     def post(self): >> "%f%\app\transaction\resource.py"
echo         try: >> "%f%\app\transaction\resource.py"
echo             brandi_project_directory = str(os.getcwd()) >> "%f%\app\transaction\resource.py"
echo             brandi_database_currenttime = datetime.now().strftime("%%Y%%m%%d%%H%%M%%S") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             mdbfilepath = '%%s\%%s_%%s' %% (brandi_project_directory, "brandi", brandi_database_currenttime) >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo             connection = pypyodbc.win_create_mdb('%%s.accdb' %% (mdbfilepath)) >> "%f%\app\transaction\resource.py"
echo             #connection.cursor().execute('CREATE TABLE transaction (id VARCHAR(255) PRIMARY KEY, name VARCHAR(25));').commit() >> "%f%\app\transaction\resource.py"
echo             connection.cursor().execute(sql_brandi_create).commit() >> "%f%\app\transaction\resource.py"
echo             response_text = ".a File Created @ %%s" %% (mdbfilepath) >> "%f%\app\transaction\resource.py"
echo             return response_text >> "%f%\app\transaction\resource.py"
echo         except KeyError as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\transaction\resource.py"
echo         except Exception as e: >> "%f%\app\transaction\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"
echo. >> "%f%\app\transaction\resource.py"


cd %f%\app\bill

echo from app.singletons import db > "%f%\app\bill\models.py"
echo. >> "%f%\app\bill\models.py"
echo. >> "%f%\app\bill\models.py"
echo class Bill(db.Model): >> "%f%\app\bill\models.py"
echo. >> "%f%\app\bill\models.py"
echo     __tablename__ = 'bill' >> "%f%\app\bill\models.py"
echo. >> "%f%\app\bill\models.py"
echo     code = db.Column(db.String, primary_key=True) >> "%f%\app\bill\models.py"
echo     description = db.Column(db.String, nullable=False) >> "%f%\app\bill\models.py"

cd %f%\app\bill

echo from marshmallow import Schema, fields, post_load > "%f%\app\bill\schemas.py"
echo from app.bill.models import Bill >> "%f%\app\bill\schemas.py"
echo. >> "%f%\app\bill\schemas.py"
echo. >> "%f%\app\bill\schemas.py"
echo class BillSchema(Schema): >> "%f%\app\bill\schemas.py"
echo. >> "%f%\app\bill\schemas.py"
echo     code = fields.String() >> "%f%\app\bill\schemas.py"
echo     description = fields.String() >> "%f%\app\bill\schemas.py"
echo. >> "%f%\app\bill\schemas.py"
echo     @post_load >> "%f%\app\bill\schemas.py"
echo     def make_bill(self, data, **kwargs): >> "%f%\app\bill\schemas.py"
echo         return Bill(**data) >> "%f%\app\bill\schemas.py"

cd %f%\app\bill

echo from app.singletons import db > "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo class BillRepository: >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo     def read_all(self, bill): >> "%f%\app\bill\repository.py"
echo         return bill.query.all() >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo     def read_one(self, code, bill): >> "%f%\app\bill\repository.py"
echo         return bill.query.filter(bill.code == code).one_or_none() >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo     def create(self, bill): >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo         # Add the user to the database >> "%f%\app\bill\repository.py"
echo         db.session.add(bill) >> "%f%\app\bill\repository.py"
echo         db.session.commit() >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo     def update(self, existing_bill, updated_bill): >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo         # Set the id to the user we want to update >> "%f%\app\bill\repository.py"
echo         updated_bill.code = existing_bill.code >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo         # merge the new object into the old and commit it to the db >> "%f%\app\bill\repository.py"
echo         db.session.merge(updated_bill) >> "%f%\app\bill\repository.py"
echo         db.session.commit() >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo     def delete(self, bill): >> "%f%\app\bill\repository.py"
echo. >> "%f%\app\bill\repository.py"
echo         db.session.delete(bill) >> "%f%\app\bill\repository.py"
echo         db.session.commit() >> "%f%\app\bill\repository.py"

cd %f%\app\bill

echo from app.bill.models import Bill > "%f%\app\bill\service.py"
echo from app.bill.schemas import BillSchema >> "%f%\app\bill\service.py"
echo from app.bill.repository import BillRepository >> "%f%\app\bill\service.py"
echo from flask import abort, make_response >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo repository = BillRepository() >> "%f%\app\bill\service.py"
echo bill_schema = BillSchema() >> "%f%\app\bill\service.py"
echo many_bill_schema = BillSchema(many=True) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo class BillService: >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo     def create(self, bill): >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Create a bill level instance using the schema and the passed in json >> "%f%\app\bill\service.py"
echo         new_bill = bill_schema.load(bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Determine if record with id exists >> "%f%\app\bill\service.py"
echo         existing_bill = repository.read_one(code=new_bill.code, bill=Bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Can we insert this record? >> "%f%\app\bill\service.py"
echo         if existing_bill is None: >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo             # Add the object to the database >> "%f%\app\bill\service.py"
echo             repository.create(new_bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo             # Serialize and return the newly created object in the response >> "%f%\app\bill\service.py"
echo             data = bill_schema.dump(new_bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo             return data, 201 >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Otherwise, nope, user exists already >> "%f%\app\bill\service.py"
echo         else: >> "%f%\app\bill\service.py"
echo             abort(409, f'bill level with code {new_bill.code} exists already') >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo     def update(self, code, bill): >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Determine if record with id exists >> "%f%\app\bill\service.py"
echo         existing_bill = repository.read_one(code=code, bill=Bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Did we find an existing bill level? >> "%f%\app\bill\service.py"
echo         if existing_bill is not None: >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo             # Create an bill level instance using the schema and the passed in bill level >> "%f%\app\bill\service.py"
echo             updated_bill = bill_schema.load(bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo             # Update bill in db >> "%f%\app\bill\service.py"
echo             repository.update(existing_bill, updated_bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo             # return updated user in the response >> "%f%\app\bill\service.py"
echo             data = bill_schema.dump(updated_bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo             return data, 200 >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\bill\service.py"
echo         else: >> "%f%\app\bill\service.py"
echo             abort(404, f"User not found for Id: {code}") >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo     def delete(self, code): >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Get the bill level requested >> "%f%\app\bill\service.py"
echo         existing_bill = repository.read_one(code, Bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Did we find a bill level? >> "%f%\app\bill\service.py"
echo         if existing_bill is not None: >> "%f%\app\bill\service.py"
echo             repository.delete(existing_bill) >> "%f%\app\bill\service.py"
echo             return make_response(f"User {code} deleted", 200) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Otherwise, nope, didn't find that bill level >> "%f%\app\bill\service.py"
echo         else: >> "%f%\app\bill\service.py"
echo             abort(404, f"bill level not found for Id: {code}") >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo     def get_by_id(self, code): >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Determine if a bill level with code exists >> "%f%\app\bill\service.py"
echo         existing_bill = repository.read_one(code=code, bill=Bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Did we find a bill level? >> "%f%\app\bill\service.py"
echo         if existing_bill is not None: >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo             return bill_schema.dump(existing_bill) >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\bill\service.py"
echo         else: >> "%f%\app\bill\service.py"
echo             abort(404, f"bill level not found for Id: {code}") >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo     def get_all(self): >> "%f%\app\bill\service.py"
echo. >> "%f%\app\bill\service.py"
echo         # Get all bill level in db >> "%f%\app\bill\service.py"
echo         bills = repository.read_all(Bill) >> "%f%\app\bill\service.py"
echo         return many_bill_schema.dump(bills) >> "%f%\app\bill\service.py"

cd %f%\app\bill

echo from flask import request > "%f%\app\bill\resource.py"
echo from flask_restplus import Namespace, Resource, fields >> "%f%\app\bill\resource.py"
echo from app.bill.service import BillService >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo api = Namespace('bill', description='Bill  API') >> "%f%\app\bill\resource.py"
echo service = BillService() >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo model_bill = api.model('Bill  Model', { >> "%f%\app\bill\resource.py"
echo     'code': fields.String(required=True, description="code of the Bill ", help="code cannot be blank."), >> "%f%\app\bill\resource.py"
echo     'description': fields.String(required=True, description="description of the Bill ", help="description cannot be blank.") >> "%f%\app\bill\resource.py"
echo     }) >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo @api.route('') >> "%f%\app\bill\resource.py"
echo class BillListResource(Resource): >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo     @api.doc(responses={ 200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error' }) >> "%f%\app\bill\resource.py"
echo     def get(self): >> "%f%\app\bill\resource.py"
echo         try: >> "%f%\app\bill\resource.py"
echo             return service.get_all() >> "%f%\app\bill\resource.py"
echo         except KeyError as e: >> "%f%\app\bill\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\bill\resource.py"
echo         except Exception as e: >> "%f%\app\bill\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}) >> "%f%\app\bill\resource.py"
echo     @api.expect(model_bill) >> "%f%\app\bill\resource.py"
echo     def post(self): >> "%f%\app\bill\resource.py"
echo         try: >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo             json_string = request.json >> "%f%\app\bill\resource.py"
echo             if not json_string: >> "%f%\app\bill\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo             return service.create(json_string) >> "%f%\app\bill\resource.py"
echo         except KeyError as e: >> "%f%\app\bill\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\bill\resource.py"
echo         except Exception as e: >> "%f%\app\bill\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo @api.route('/^<int:bill_id^>') >> "%f%\app\bill\resource.py"
echo class BillResource(Resource): >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\bill\resource.py"
echo                         params={'bill_id': 'Specify the transaction_id associated with the Bill '}) >> "%f%\app\bill\resource.py"
echo     def get(self, bill_id): >> "%f%\app\bill\resource.py"
echo         try: >> "%f%\app\bill\resource.py"
echo             return service.get_by_id(bill_id) >> "%f%\app\bill\resource.py"
echo         except KeyError as e: >> "%f%\app\bill\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\bill\resource.py"
echo         except Exception as e: >> "%f%\app\bill\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\bill\resource.py"
echo                         params={'bill_id': 'Specify the transaction_id associated with the Bill '}) >> "%f%\app\bill\resource.py"
echo     @api.expect(model_bill) >> "%f%\app\bill\resource.py"
echo     def put(self, bill_id): >> "%f%\app\bill\resource.py"
echo         try: >> "%f%\app\bill\resource.py"
echo             json_data = request.json >> "%f%\app\bill\resource.py"
echo             if not json_data: >> "%f%\app\bill\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo             return service.update(bill_id, json_data) >> "%f%\app\bill\resource.py"
echo         except KeyError as e: >> "%f%\app\bill\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\bill\resource.py"
echo         except Exception as e: >> "%f%\app\bill\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\bill\resource.py"
echo. >> "%f%\app\bill\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\bill\resource.py"
echo                         params={'bill_id': 'Specify the transaction_id associated with the Bill '}) >> "%f%\app\bill\resource.py"
echo     def delete(self, bill_id): >> "%f%\app\bill\resource.py"
echo         try: >> "%f%\app\bill\resource.py"
echo             return service.delete(bill_id) >> "%f%\app\bill\resource.py"
echo         except KeyError as e: >> "%f%\app\bill\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\bill\resource.py"
echo         except Exception as e: >> "%f%\app\bill\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\bill\resource.py"

cd %f%\app\product

echo from app.singletons import db > "%f%\app\product\models.py"
echo. >> "%f%\app\product\models.py"
echo. >> "%f%\app\product\models.py"
echo class Product(db.Model): >> "%f%\app\product\models.py"
echo. >> "%f%\app\product\models.py"
echo     __tablename__ = 'product' >> "%f%\app\product\models.py"
echo. >> "%f%\app\product\models.py"
echo     code = db.Column(db.String, primary_key=True) >> "%f%\app\product\models.py"
echo     description = db.Column(db.String, nullable=False) >> "%f%\app\product\models.py"

cd %f%\app\product

echo from marshmallow import Schema, fields, post_load > "%f%\app\product\schemas.py"
echo from app.product.models import Product >> "%f%\app\product\schemas.py"
echo. >> "%f%\app\product\schemas.py"
echo. >> "%f%\app\product\schemas.py"
echo class ProductSchema(Schema): >> "%f%\app\product\schemas.py"
echo. >> "%f%\app\product\schemas.py"
echo     code = fields.String() >> "%f%\app\product\schemas.py"
echo     description = fields.String() >> "%f%\app\product\schemas.py"
echo. >> "%f%\app\product\schemas.py"
echo     @post_load >> "%f%\app\product\schemas.py"
echo     def make_product(self, data, **kwargs): >> "%f%\app\product\schemas.py"
echo         return Product(**data) >> "%f%\app\product\schemas.py"

cd %f%\app\product

echo from app.singletons import db > "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo class ProductRepository: >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo     def read_all(self, product): >> "%f%\app\product\repository.py"
echo         return product.query.all() >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo     def read_one(self, code, product): >> "%f%\app\product\repository.py"
echo         return product.query.filter(product.code == code).one_or_none() >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo     def create(self, product): >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo         # Add the user to the database >> "%f%\app\product\repository.py"
echo         db.session.add(product) >> "%f%\app\product\repository.py"
echo         db.session.commit() >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo     def update(self, existing_product, updated_product): >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo         # Set the id to the user we want to update >> "%f%\app\product\repository.py"
echo         updated_product.code = existing_product.code >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo         # merge the new object into the old and commit it to the db >> "%f%\app\product\repository.py"
echo         db.session.merge(updated_product) >> "%f%\app\product\repository.py"
echo         db.session.commit() >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo     def delete(self, product): >> "%f%\app\product\repository.py"
echo. >> "%f%\app\product\repository.py"
echo         db.session.delete(product) >> "%f%\app\product\repository.py"
echo         db.session.commit() >> "%f%\app\product\repository.py"

cd %f%\app\product

echo from app.product.models import Product > "%f%\app\product\service.py"
echo from app.product.schemas import ProductSchema >> "%f%\app\product\service.py"
echo from app.product.repository import ProductRepository >> "%f%\app\product\service.py"
echo from flask import abort, make_response >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo repository = ProductRepository() >> "%f%\app\product\service.py"
echo product_schema = ProductSchema() >> "%f%\app\product\service.py"
echo many_product_schema = ProductSchema(many=True) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo class ProductService: >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo     def create(self, product): >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Create a product level instance using the schema and the passed in json >> "%f%\app\product\service.py"
echo         new_product = product_schema.load(product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Determine if record with id exists >> "%f%\app\product\service.py"
echo         existing_product = repository.read_one(code=new_product.code, product=Product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Can we insert this record? >> "%f%\app\product\service.py"
echo         if existing_product is None: >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo             # Add the object to the database >> "%f%\app\product\service.py"
echo             repository.create(new_product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo             # Serialize and return the newly created object in the response >> "%f%\app\product\service.py"
echo             data = product_schema.dump(new_product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo             return data, 201 >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Otherwise, nope, user exists already >> "%f%\app\product\service.py"
echo         else: >> "%f%\app\product\service.py"
echo             abort(409, f'product level with code {new_product.code} exists already') >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo     def update(self, code, product): >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Determine if record with id exists >> "%f%\app\product\service.py"
echo         existing_product = repository.read_one(code=code, product=Product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Did we find an existing product level? >> "%f%\app\product\service.py"
echo         if existing_product is not None: >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo             # Create an product level instance using the schema and the passed in product level >> "%f%\app\product\service.py"
echo             updated_product = product_schema.load(product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo             # Update product in db >> "%f%\app\product\service.py"
echo             repository.update(existing_product, updated_product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo             # return updated user in the response >> "%f%\app\product\service.py"
echo             data = product_schema.dump(updated_product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo             return data, 200 >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\product\service.py"
echo         else: >> "%f%\app\product\service.py"
echo             abort(404, f"User not found for Id: {code}") >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo     def delete(self, code): >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Get the product level requested >> "%f%\app\product\service.py"
echo         existing_product = repository.read_one(code, Product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Did we find a product level? >> "%f%\app\product\service.py"
echo         if existing_product is not None: >> "%f%\app\product\service.py"
echo             repository.delete(existing_product) >> "%f%\app\product\service.py"
echo             return make_response(f"User {code} deleted", 200) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Otherwise, nope, didn't find that product level >> "%f%\app\product\service.py"
echo         else: >> "%f%\app\product\service.py"
echo             abort(404, f"product level not found for Id: {code}") >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo     def get_by_id(self, code): >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Determine if a product level with code exists >> "%f%\app\product\service.py"
echo         existing_product = repository.read_one(code=code, product=Product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Did we find a product level? >> "%f%\app\product\service.py"
echo         if existing_product is not None: >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo             return product_schema.dump(existing_product) >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\product\service.py"
echo         else: >> "%f%\app\product\service.py"
echo             abort(404, f"product level not found for Id: {code}") >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo     def get_all(self): >> "%f%\app\product\service.py"
echo. >> "%f%\app\product\service.py"
echo         # Get all product level in db >> "%f%\app\product\service.py"
echo         products = repository.read_all(Product) >> "%f%\app\product\service.py"
echo         return many_product_schema.dump(products) >> "%f%\app\product\service.py"

cd %f%\app\product

echo from flask import request > "%f%\app\product\resource.py"
echo from flask_restplus import Namespace, Resource, fields >> "%f%\app\product\resource.py"
echo from app.product.service import ProductService >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo api = Namespace('product', description='Product  API') >> "%f%\app\product\resource.py"
echo service = ProductService() >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo model_product = api.model('Product  Model', { >> "%f%\app\product\resource.py"
echo     'code': fields.String(required=True, description="code of the Product ", help="code cannot be blank."), >> "%f%\app\product\resource.py"
echo     'description': fields.String(required=True, description="description of the Product ", help="description cannot be blank.") >> "%f%\app\product\resource.py"
echo     }) >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo @api.route('') >> "%f%\app\product\resource.py"
echo class ProductListResource(Resource): >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo     @api.doc(responses={ 200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error' }) >> "%f%\app\product\resource.py"
echo     def get(self): >> "%f%\app\product\resource.py"
echo         try: >> "%f%\app\product\resource.py"
echo             return service.get_all() >> "%f%\app\product\resource.py"
echo         except KeyError as e: >> "%f%\app\product\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\product\resource.py"
echo         except Exception as e: >> "%f%\app\product\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}) >> "%f%\app\product\resource.py"
echo     @api.expect(model_product) >> "%f%\app\product\resource.py"
echo     def post(self): >> "%f%\app\product\resource.py"
echo         try: >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo             json_string = request.json >> "%f%\app\product\resource.py"
echo             if not json_string: >> "%f%\app\product\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo             return service.create(json_string) >> "%f%\app\product\resource.py"
echo         except KeyError as e: >> "%f%\app\product\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\product\resource.py"
echo         except Exception as e: >> "%f%\app\product\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo @api.route('/^<int:product_id^>') >> "%f%\app\product\resource.py"
echo class ProductResource(Resource): >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\product\resource.py"
echo                         params={'product_id': 'Specify the transaction_id associated with the Product '}) >> "%f%\app\product\resource.py"
echo     def get(self, product_id): >> "%f%\app\product\resource.py"
echo         try: >> "%f%\app\product\resource.py"
echo             return service.get_by_id(product_id) >> "%f%\app\product\resource.py"
echo         except KeyError as e: >> "%f%\app\product\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\product\resource.py"
echo         except Exception as e: >> "%f%\app\product\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\product\resource.py"
echo                         params={'product_id': 'Specify the transaction_id associated with the Product '}) >> "%f%\app\product\resource.py"
echo     @api.expect(model_product) >> "%f%\app\product\resource.py"
echo     def put(self, product_id): >> "%f%\app\product\resource.py"
echo         try: >> "%f%\app\product\resource.py"
echo             json_data = request.json >> "%f%\app\product\resource.py"
echo             if not json_data: >> "%f%\app\product\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo             return service.update(product_id, json_data) >> "%f%\app\product\resource.py"
echo         except KeyError as e: >> "%f%\app\product\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\product\resource.py"
echo         except Exception as e: >> "%f%\app\product\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\product\resource.py"
echo. >> "%f%\app\product\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\product\resource.py"
echo                         params={'product_id': 'Specify the transaction_id associated with the Product '}) >> "%f%\app\product\resource.py"
echo     def delete(self, product_id): >> "%f%\app\product\resource.py"
echo         try: >> "%f%\app\product\resource.py"
echo             return service.delete(product_id) >> "%f%\app\product\resource.py"
echo         except KeyError as e: >> "%f%\app\product\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\product\resource.py"
echo         except Exception as e: >> "%f%\app\product\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\product\resource.py"

cd %f%\app\customer

echo from app.singletons import db > "%f%\app\customer\models.py"
echo. >> "%f%\app\customer\models.py"
echo. >> "%f%\app\customer\models.py"
echo class Customer(db.Model): >> "%f%\app\customer\models.py"
echo. >> "%f%\app\customer\models.py"
echo     __tablename__ = 'customer' >> "%f%\app\customer\models.py"
echo. >> "%f%\app\customer\models.py"
echo     code = db.Column(db.String, primary_key=True) >> "%f%\app\customer\models.py"
echo     description = db.Column(db.String, nullable=False) >> "%f%\app\customer\models.py"

cd %f%\app\customer

echo from marshmallow import Schema, fields, post_load > "%f%\app\customer\schemas.py"
echo from app.customer.models import Customer >> "%f%\app\customer\schemas.py"
echo. >> "%f%\app\customer\schemas.py"
echo. >> "%f%\app\customer\schemas.py"
echo class CustomerSchema(Schema): >> "%f%\app\customer\schemas.py"
echo. >> "%f%\app\customer\schemas.py"
echo     code = fields.String() >> "%f%\app\customer\schemas.py"
echo     description = fields.String() >> "%f%\app\customer\schemas.py"
echo. >> "%f%\app\customer\schemas.py"
echo     @post_load >> "%f%\app\customer\schemas.py"
echo     def make_customer(self, data, **kwargs): >> "%f%\app\customer\schemas.py"
echo         return Customer(**data) >> "%f%\app\customer\schemas.py"

cd %f%\app\customer

echo from app.singletons import db > "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo class CustomerRepository: >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo     def read_all(self, customer): >> "%f%\app\customer\repository.py"
echo         return customer.query.all() >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo     def read_one(self, code, customer): >> "%f%\app\customer\repository.py"
echo         return customer.query.filter(customer.code == code).one_or_none() >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo     def create(self, customer): >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo         # Add the user to the database >> "%f%\app\customer\repository.py"
echo         db.session.add(customer) >> "%f%\app\customer\repository.py"
echo         db.session.commit() >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo     def update(self, existing_customer, updated_customer): >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo         # Set the id to the user we want to update >> "%f%\app\customer\repository.py"
echo         updated_customer.code = existing_customer.code >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo         # merge the new object into the old and commit it to the db >> "%f%\app\customer\repository.py"
echo         db.session.merge(updated_customer) >> "%f%\app\customer\repository.py"
echo         db.session.commit() >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo     def delete(self, customer): >> "%f%\app\customer\repository.py"
echo. >> "%f%\app\customer\repository.py"
echo         db.session.delete(customer) >> "%f%\app\customer\repository.py"
echo         db.session.commit() >> "%f%\app\customer\repository.py"

cd %f%\app\transaction

echo from app.customer.models import Customer > "%f%\app\customer\service.py"
echo from app.customer.schemas import CustomerSchema >> "%f%\app\customer\service.py"
echo from app.customer.repository import CustomerRepository >> "%f%\app\customer\service.py"
echo from flask import abort, make_response >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo repository = CustomerRepository() >> "%f%\app\customer\service.py"
echo customer_schema = CustomerSchema() >> "%f%\app\customer\service.py"
echo many_customer_schema = CustomerSchema(many=True) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo class CustomerService: >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo     def create(self, customer): >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Create a customer level instance using the schema and the passed in json >> "%f%\app\customer\service.py"
echo         new_customer = customer_schema.load(customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Determine if record with id exists >> "%f%\app\customer\service.py"
echo         existing_customer = repository.read_one(code=new_customer.code, customer=Customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Can we insert this record? >> "%f%\app\customer\service.py"
echo         if existing_customer is None: >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo             # Add the object to the database >> "%f%\app\customer\service.py"
echo             repository.create(new_customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo             # Serialize and return the newly created object in the response >> "%f%\app\customer\service.py"
echo             data = customer_schema.dump(new_customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo             return data, 201 >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Otherwise, nope, user exists already >> "%f%\app\customer\service.py"
echo         else: >> "%f%\app\customer\service.py"
echo             abort(409, f'customer level with code {new_customer.code} exists already') >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo     def update(self, code, customer): >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Determine if record with id exists >> "%f%\app\customer\service.py"
echo         existing_customer = repository.read_one(code=code, customer=Customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Did we find an existing customer level? >> "%f%\app\customer\service.py"
echo         if existing_customer is not None: >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo             # Create an customer level instance using the schema and the passed in customer level >> "%f%\app\customer\service.py"
echo             updated_customer = customer_schema.load(customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo             # Update customer in db >> "%f%\app\customer\service.py"
echo             repository.update(existing_customer, updated_customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo             # return updated user in the response >> "%f%\app\customer\service.py"
echo             data = customer_schema.dump(updated_customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo             return data, 200 >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\customer\service.py"
echo         else: >> "%f%\app\customer\service.py"
echo             abort(404, f"User not found for Id: {code}") >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo     def delete(self, code): >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Get the customer level requested >> "%f%\app\customer\service.py"
echo         existing_customer = repository.read_one(code, Customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Did we find a customer level? >> "%f%\app\customer\service.py"
echo         if existing_customer is not None: >> "%f%\app\customer\service.py"
echo             repository.delete(existing_customer) >> "%f%\app\customer\service.py"
echo             return make_response(f"User {code} deleted", 200) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Otherwise, nope, didn't find that customer level >> "%f%\app\customer\service.py"
echo         else: >> "%f%\app\customer\service.py"
echo             abort(404, f"customer level not found for Id: {code}") >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo     def get_by_id(self, code): >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Determine if a customer level with code exists >> "%f%\app\customer\service.py"
echo         existing_customer = repository.read_one(code=code, customer=Customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Did we find a customer level? >> "%f%\app\customer\service.py"
echo         if existing_customer is not None: >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo             return customer_schema.dump(existing_customer) >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\customer\service.py"
echo         else: >> "%f%\app\customer\service.py"
echo             abort(404, f"customer level not found for Id: {code}") >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo     def get_all(self): >> "%f%\app\customer\service.py"
echo. >> "%f%\app\customer\service.py"
echo         # Get all customer level in db >> "%f%\app\customer\service.py"
echo         customers = repository.read_all(Customer) >> "%f%\app\customer\service.py"
echo         return many_customer_schema.dump(customers) >> "%f%\app\customer\service.py"

cd %f%\app\customer

echo from flask import request > "%f%\app\customer\resource.py"
echo from flask_restplus import Namespace, Resource, fields >> "%f%\app\customer\resource.py"
echo from app.customer.service import CustomerService >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo api = Namespace('customer', description='Customer  API') >> "%f%\app\customer\resource.py"
echo service = CustomerService() >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo model_customer = api.model('Customer  Model', { >> "%f%\app\customer\resource.py"
echo     'code': fields.String(required=True, description="code of the Customer ", help="code cannot be blank."), >> "%f%\app\customer\resource.py"
echo     'description': fields.String(required=True, description="description of the Customer ", help="description cannot be blank.") >> "%f%\app\customer\resource.py"
echo     }) >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo @api.route('') >> "%f%\app\customer\resource.py"
echo class CustomerListResource(Resource): >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo     @api.doc(responses={ 200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error' }) >> "%f%\app\customer\resource.py"
echo     def get(self): >> "%f%\app\customer\resource.py"
echo         try: >> "%f%\app\customer\resource.py"
echo             return service.get_all() >> "%f%\app\customer\resource.py"
echo         except KeyError as e: >> "%f%\app\customer\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\customer\resource.py"
echo         except Exception as e: >> "%f%\app\customer\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}) >> "%f%\app\customer\resource.py"
echo     @api.expect(model_customer) >> "%f%\app\customer\resource.py"
echo     def post(self): >> "%f%\app\customer\resource.py"
echo         try: >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo             json_string = request.json >> "%f%\app\customer\resource.py"
echo             if not json_string: >> "%f%\app\customer\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo             return service.create(json_string) >> "%f%\app\customer\resource.py"
echo         except KeyError as e: >> "%f%\app\customer\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\customer\resource.py"
echo         except Exception as e: >> "%f%\app\customer\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo @api.route('/^<int:customer_id^>') >> "%f%\app\customer\resource.py"
echo class CustomerResource(Resource): >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\customer\resource.py"
echo                         params={'customer_id': 'Specify the transaction_id associated with the Customer '}) >> "%f%\app\customer\resource.py"
echo     def get(self, customer_id): >> "%f%\app\customer\resource.py"
echo         try: >> "%f%\app\customer\resource.py"
echo             return service.get_by_id(customer_id) >> "%f%\app\customer\resource.py"
echo         except KeyError as e: >> "%f%\app\customer\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\customer\resource.py"
echo         except Exception as e: >> "%f%\app\customer\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\customer\resource.py"
echo                         params={'customer_id': 'Specify the transaction_id associated with the Customer '}) >> "%f%\app\customer\resource.py"
echo     @api.expect(model_customer) >> "%f%\app\customer\resource.py"
echo     def put(self, customer_id): >> "%f%\app\customer\resource.py"
echo         try: >> "%f%\app\customer\resource.py"
echo             json_data = request.json >> "%f%\app\customer\resource.py"
echo             if not json_data: >> "%f%\app\customer\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo             return service.update(customer_id, json_data) >> "%f%\app\customer\resource.py"
echo         except KeyError as e: >> "%f%\app\customer\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\customer\resource.py"
echo         except Exception as e: >> "%f%\app\customer\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\customer\resource.py"
echo. >> "%f%\app\customer\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\customer\resource.py"
echo                         params={'customer_id': 'Specify the transaction_id associated with the Customer '}) >> "%f%\app\customer\resource.py"
echo     def delete(self, customer_id): >> "%f%\app\customer\resource.py"
echo         try: >> "%f%\app\customer\resource.py"
echo             return service.delete(customer_id) >> "%f%\app\customer\resource.py"
echo         except KeyError as e: >> "%f%\app\customer\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\customer\resource.py"
echo         except Exception as e: >> "%f%\app\customer\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\customer\resource.py"

cd %f%\app\address

echo from app.singletons import db > "%f%\app\address\models.py"
echo. >> "%f%\app\address\models.py"
echo. >> "%f%\app\address\models.py"
echo class Address(db.Model): >> "%f%\app\address\models.py"
echo. >> "%f%\app\address\models.py"
echo     __tablename__ = 'address' >> "%f%\app\address\models.py"
echo. >> "%f%\app\address\models.py"
echo     code = db.Column(db.String, primary_key=True) >> "%f%\app\address\models.py"
echo     description = db.Column(db.String, nullable=False) >> "%f%\app\address\models.py"

cd %f%\app\address

echo from marshmallow import Schema, fields, post_load > "%f%\app\address\schemas.py"
echo from app.address.models import Address >> "%f%\app\address\schemas.py"
echo. >> "%f%\app\address\schemas.py"
echo. >> "%f%\app\address\schemas.py"
echo class AddressSchema(Schema): >> "%f%\app\address\schemas.py"
echo. >> "%f%\app\address\schemas.py"
echo     code = fields.String() >> "%f%\app\address\schemas.py"
echo     description = fields.String() >> "%f%\app\address\schemas.py"
echo. >> "%f%\app\address\schemas.py"
echo     @post_load >> "%f%\app\address\schemas.py"
echo     def make_address(self, data, **kwargs): >> "%f%\app\address\schemas.py"
echo         return Address(**data) >> "%f%\app\address\schemas.py"

cd %f%\app\address

echo from app.singletons import db > "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo class AddressRepository: >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo     def read_all(self, address): >> "%f%\app\address\repository.py"
echo         return address.query.all() >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo     def read_one(self, code, address): >> "%f%\app\address\repository.py"
echo         return address.query.filter(address.code == code).one_or_none() >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo     def create(self, address): >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo         # Add the user to the database >> "%f%\app\address\repository.py"
echo         db.session.add(address) >> "%f%\app\address\repository.py"
echo         db.session.commit() >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo     def update(self, existing_address, updated_address): >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo         # Set the id to the user we want to update >> "%f%\app\address\repository.py"
echo         updated_address.code = existing_address.code >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo         # merge the new object into the old and commit it to the db >> "%f%\app\address\repository.py"
echo         db.session.merge(updated_address) >> "%f%\app\address\repository.py"
echo         db.session.commit() >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo     def delete(self, address): >> "%f%\app\address\repository.py"
echo. >> "%f%\app\address\repository.py"
echo         db.session.delete(address) >> "%f%\app\address\repository.py"
echo         db.session.commit() >> "%f%\app\address\repository.py"

cd %f%\app\address

echo from app.address.models import Address > "%f%\app\address\service.py"
echo from app.address.schemas import AddressSchema >> "%f%\app\address\service.py"
echo from app.address.repository import AddressRepository >> "%f%\app\address\service.py"
echo from flask import abort, make_response >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo repository = AddressRepository() >> "%f%\app\address\service.py"
echo address_schema = AddressSchema() >> "%f%\app\address\service.py"
echo many_address_schema = AddressSchema(many=True) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo class AddressService: >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo     def create(self, address): >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Create a address level instance using the schema and the passed in json >> "%f%\app\address\service.py"
echo         new_address = address_schema.load(address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Determine if record with id exists >> "%f%\app\address\service.py"
echo         existing_address = repository.read_one(code=new_address.code, address=Address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Can we insert this record? >> "%f%\app\address\service.py"
echo         if existing_address is None: >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo             # Add the object to the database >> "%f%\app\address\service.py"
echo             repository.create(new_address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo             # Serialize and return the newly created object in the response >> "%f%\app\address\service.py"
echo             data = address_schema.dump(new_address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo             return data, 201 >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Otherwise, nope, user exists already >> "%f%\app\address\service.py"
echo         else: >> "%f%\app\address\service.py"
echo             abort(409, f'address level with code {new_address.code} exists already') >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo     def update(self, code, address): >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Determine if record with id exists >> "%f%\app\address\service.py"
echo         existing_address = repository.read_one(code=code, address=Address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Did we find an existing address level? >> "%f%\app\address\service.py"
echo         if existing_address is not None: >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo             # Create an address level instance using the schema and the passed in address level >> "%f%\app\address\service.py"
echo             updated_address = address_schema.load(address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo             # Update address in db >> "%f%\app\address\service.py"
echo             repository.update(existing_address, updated_address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo             # return updated user in the response >> "%f%\app\address\service.py"
echo             data = address_schema.dump(updated_address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo             return data, 200 >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\address\service.py"
echo         else: >> "%f%\app\address\service.py"
echo             abort(404, f"User not found for Id: {code}") >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo     def delete(self, code): >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Get the address level requested >> "%f%\app\address\service.py"
echo         existing_address = repository.read_one(code, Address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Did we find a address level? >> "%f%\app\address\service.py"
echo         if existing_address is not None: >> "%f%\app\address\service.py"
echo             repository.delete(existing_address) >> "%f%\app\address\service.py"
echo             return make_response(f"User {code} deleted", 200) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Otherwise, nope, didn't find that address level >> "%f%\app\address\service.py"
echo         else: >> "%f%\app\address\service.py"
echo             abort(404, f"address level not found for Id: {code}") >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo     def get_by_id(self, code): >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Determine if a address level with code exists >> "%f%\app\address\service.py"
echo         existing_address = repository.read_one(code=code, address=Address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Did we find a address level? >> "%f%\app\address\service.py"
echo         if existing_address is not None: >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo             return address_schema.dump(existing_address) >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\address\service.py"
echo         else: >> "%f%\app\address\service.py"
echo             abort(404, f"address level not found for Id: {code}") >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo     def get_all(self): >> "%f%\app\address\service.py"
echo. >> "%f%\app\address\service.py"
echo         # Get all address level in db >> "%f%\app\address\service.py"
echo         addresss = repository.read_all(Address) >> "%f%\app\address\service.py"
echo         return many_address_schema.dump(addresss) >> "%f%\app\address\service.py"

cd %f%\app\address

echo from flask import request > "%f%\app\address\resource.py"
echo from flask_restplus import Namespace, Resource, fields >> "%f%\app\address\resource.py"
echo from app.address.service import AddressService >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo api = Namespace('address', description='Address  API') >> "%f%\app\address\resource.py"
echo service = AddressService() >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo model_address = api.model('Address  Model', { >> "%f%\app\address\resource.py"
echo     'code': fields.String(required=True, description="code of the Address ", help="code cannot be blank."), >> "%f%\app\address\resource.py"
echo     'description': fields.String(required=True, description="description of the Address ", help="description cannot be blank.") >> "%f%\app\address\resource.py"
echo     }) >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo @api.route('') >> "%f%\app\address\resource.py"
echo class AddressListResource(Resource): >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo     @api.doc(responses={ 200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error' }) >> "%f%\app\address\resource.py"
echo     def get(self): >> "%f%\app\address\resource.py"
echo         try: >> "%f%\app\address\resource.py"
echo             return service.get_all() >> "%f%\app\address\resource.py"
echo         except KeyError as e: >> "%f%\app\address\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\address\resource.py"
echo         except Exception as e: >> "%f%\app\address\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}) >> "%f%\app\address\resource.py"
echo     @api.expect(model_address) >> "%f%\app\address\resource.py"
echo     def post(self): >> "%f%\app\address\resource.py"
echo         try: >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo             json_string = request.json >> "%f%\app\address\resource.py"
echo             if not json_string: >> "%f%\app\address\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo             return service.create(json_string) >> "%f%\app\address\resource.py"
echo         except KeyError as e: >> "%f%\app\address\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\address\resource.py"
echo         except Exception as e: >> "%f%\app\address\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo @api.route('/^<int:address_id^>') >> "%f%\app\address\resource.py"
echo class AddressResource(Resource): >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\address\resource.py"
echo                         params={'address_id': 'Specify the transaction_id associated with the Address '}) >> "%f%\app\address\resource.py"
echo     def get(self, address_id): >> "%f%\app\address\resource.py"
echo         try: >> "%f%\app\address\resource.py"
echo             return service.get_by_id(address_id) >> "%f%\app\address\resource.py"
echo         except KeyError as e: >> "%f%\app\address\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\address\resource.py"
echo         except Exception as e: >> "%f%\app\address\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\address\resource.py"
echo                         params={'address_id': 'Specify the transaction_id associated with the Address '}) >> "%f%\app\address\resource.py"
echo     @api.expect(model_address) >> "%f%\app\address\resource.py"
echo     def put(self, address_id): >> "%f%\app\address\resource.py"
echo         try: >> "%f%\app\address\resource.py"
echo             json_data = request.json >> "%f%\app\address\resource.py"
echo             if not json_data: >> "%f%\app\address\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo             return service.update(address_id, json_data) >> "%f%\app\address\resource.py"
echo         except KeyError as e: >> "%f%\app\address\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\address\resource.py"
echo         except Exception as e: >> "%f%\app\address\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\address\resource.py"
echo. >> "%f%\app\address\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\address\resource.py"
echo                         params={'address_id': 'Specify the transaction_id associated with the Address '}) >> "%f%\app\address\resource.py"
echo     def delete(self, address_id): >> "%f%\app\address\resource.py"
echo         try: >> "%f%\app\address\resource.py"
echo             return service.delete(address_id) >> "%f%\app\address\resource.py"
echo         except KeyError as e: >> "%f%\app\address\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\address\resource.py"
echo         except Exception as e: >> "%f%\app\address\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\address\resource.py"

cd %f%\app\user

echo from app.singletons import db > "%f%\app\user\models.py"
echo. >> "%f%\app\user\models.py"
echo. >> "%f%\app\user\models.py"
echo class User(db.Model): >> "%f%\app\user\models.py"
echo. >> "%f%\app\user\models.py"
echo     __tablename__ = 'user' >> "%f%\app\user\models.py"
echo. >> "%f%\app\user\models.py"
echo     code = db.Column(db.String, primary_key=True) >> "%f%\app\user\models.py"
echo     description = db.Column(db.String, nullable=False) >> "%f%\app\user\models.py"

cd %f%\app\user

echo from marshmallow import Schema, fields, post_load > "%f%\app\user\schemas.py"
echo from app.user.models import User >> "%f%\app\user\schemas.py"
echo. >> "%f%\app\user\schemas.py"
echo. >> "%f%\app\user\schemas.py"
echo class UserSchema(Schema): >> "%f%\app\user\schemas.py"
echo. >> "%f%\app\user\schemas.py"
echo     code = fields.String() >> "%f%\app\user\schemas.py"
echo     description = fields.String() >> "%f%\app\user\schemas.py"
echo. >> "%f%\app\user\schemas.py"
echo     @post_load >> "%f%\app\user\schemas.py"
echo     def make_user(self, data, **kwargs): >> "%f%\app\user\schemas.py"
echo         return User(**data) >> "%f%\app\user\schemas.py"

cd %f%\app\user

echo from app.singletons import db > "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo class UserRepository: >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo     def read_all(self, user): >> "%f%\app\user\repository.py"
echo         return user.query.all() >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo     def read_one(self, code, user): >> "%f%\app\user\repository.py"
echo         return user.query.filter(user.code == code).one_or_none() >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo     def create(self, user): >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo         # Add the user to the database >> "%f%\app\user\repository.py"
echo         db.session.add(user) >> "%f%\app\user\repository.py"
echo         db.session.commit() >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo     def update(self, existing_user, updated_user): >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo         # Set the id to the user we want to update >> "%f%\app\user\repository.py"
echo         updated_user.code = existing_user.code >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo         # merge the new object into the old and commit it to the db >> "%f%\app\user\repository.py"
echo         db.session.merge(updated_user) >> "%f%\app\user\repository.py"
echo         db.session.commit() >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo     def delete(self, user): >> "%f%\app\user\repository.py"
echo. >> "%f%\app\user\repository.py"
echo         db.session.delete(user) >> "%f%\app\user\repository.py"
echo         db.session.commit() >> "%f%\app\user\repository.py"

cd %f%\app\transaction

echo from app.user.models import User > "%f%\app\user\service.py"
echo from app.user.schemas import UserSchema >> "%f%\app\user\service.py"
echo from app.user.repository import UserRepository >> "%f%\app\user\service.py"
echo from flask import abort, make_response >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo repository = UserRepository() >> "%f%\app\user\service.py"
echo user_schema = UserSchema() >> "%f%\app\user\service.py"
echo many_user_schema = UserSchema(many=True) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo class UserService: >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo     def create(self, user): >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Create a user level instance using the schema and the passed in json >> "%f%\app\user\service.py"
echo         new_user = user_schema.load(user) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Determine if record with id exists >> "%f%\app\user\service.py"
echo         existing_user = repository.read_one(code=new_user.code, user=User) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Can we insert this record? >> "%f%\app\user\service.py"
echo         if existing_user is None: >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo             # Add the object to the database >> "%f%\app\user\service.py"
echo             repository.create(new_user) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo             # Serialize and return the newly created object in the response >> "%f%\app\user\service.py"
echo             data = user_schema.dump(new_user) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo             return data, 201 >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Otherwise, nope, user exists already >> "%f%\app\user\service.py"
echo         else: >> "%f%\app\user\service.py"
echo             abort(409, f'user level with code {new_user.code} exists already') >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo     def update(self, code, user): >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Determine if record with id exists >> "%f%\app\user\service.py"
echo         existing_user = repository.read_one(code=code, user=User) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Did we find an existing user level? >> "%f%\app\user\service.py"
echo         if existing_user is not None: >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo             # Create an user level instance using the schema and the passed in user level >> "%f%\app\user\service.py"
echo             updated_user = user_schema.load(user) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo             # Update user in db >> "%f%\app\user\service.py"
echo             repository.update(existing_user, updated_user) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo             # return updated user in the response >> "%f%\app\user\service.py"
echo             data = user_schema.dump(updated_user) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo             return data, 200 >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\user\service.py"
echo         else: >> "%f%\app\user\service.py"
echo             abort(404, f"User not found for Id: {code}") >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo     def delete(self, code): >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Get the user level requested >> "%f%\app\user\service.py"
echo         existing_user = repository.read_one(code, User) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Did we find a user level? >> "%f%\app\user\service.py"
echo         if existing_user is not None: >> "%f%\app\user\service.py"
echo             repository.delete(existing_user) >> "%f%\app\user\service.py"
echo             return make_response(f"User {code} deleted", 200) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Otherwise, nope, didn't find that user level >> "%f%\app\user\service.py"
echo         else: >> "%f%\app\user\service.py"
echo             abort(404, f"user level not found for Id: {code}") >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo     def get_by_id(self, code): >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Determine if a user level with code exists >> "%f%\app\user\service.py"
echo         existing_user = repository.read_one(code=code, user=User) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Did we find a user level? >> "%f%\app\user\service.py"
echo         if existing_user is not None: >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo             return user_schema.dump(existing_user) >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Otherwise, nope, didn't find that user >> "%f%\app\user\service.py"
echo         else: >> "%f%\app\user\service.py"
echo             abort(404, f"user level not found for Id: {code}") >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo     def get_all(self): >> "%f%\app\user\service.py"
echo. >> "%f%\app\user\service.py"
echo         # Get all user level in db >> "%f%\app\user\service.py"
echo         users = repository.read_all(User) >> "%f%\app\user\service.py"
echo         return many_user_schema.dump(users) >> "%f%\app\user\service.py"

cd %f%\app\user

echo from flask import request > "%f%\app\user\resource.py"
echo from flask_restplus import Namespace, Resource, fields >> "%f%\app\user\resource.py"
echo from app.user.service import UserService >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo api = Namespace('user', description='User  API') >> "%f%\app\user\resource.py"
echo service = UserService() >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo model_user = api.model('User  Model', { >> "%f%\app\user\resource.py"
echo     'code': fields.String(required=True, description="code of the User ", help="code cannot be blank."), >> "%f%\app\user\resource.py"
echo     'description': fields.String(required=True, description="description of the User ", help="description cannot be blank.") >> "%f%\app\user\resource.py"
echo     }) >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo @api.route('') >> "%f%\app\user\resource.py"
echo class UserListResource(Resource): >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo     @api.doc(responses={ 200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error' }) >> "%f%\app\user\resource.py"
echo     def get(self): >> "%f%\app\user\resource.py"
echo         try: >> "%f%\app\user\resource.py"
echo             return service.get_all() >> "%f%\app\user\resource.py"
echo         except KeyError as e: >> "%f%\app\user\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\user\resource.py"
echo         except Exception as e: >> "%f%\app\user\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}) >> "%f%\app\user\resource.py"
echo     @api.expect(model_user) >> "%f%\app\user\resource.py"
echo     def post(self): >> "%f%\app\user\resource.py"
echo         try: >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo             json_string = request.json >> "%f%\app\user\resource.py"
echo             if not json_string: >> "%f%\app\user\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo             return service.create(json_string) >> "%f%\app\user\resource.py"
echo         except KeyError as e: >> "%f%\app\user\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\user\resource.py"
echo         except Exception as e: >> "%f%\app\user\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo @api.route('/^<int:user_id^>') >> "%f%\app\user\resource.py"
echo class UserResource(Resource): >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\user\resource.py"
echo                         params={'user_id': 'Specify the transaction_id associated with the User '}) >> "%f%\app\user\resource.py"
echo     def get(self, user_id): >> "%f%\app\user\resource.py"
echo         try: >> "%f%\app\user\resource.py"
echo             return service.get_by_id(user_id) >> "%f%\app\user\resource.py"
echo         except KeyError as e: >> "%f%\app\user\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\user\resource.py"
echo         except Exception as e: >> "%f%\app\user\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\user\resource.py"
echo                         params={'user_id': 'Specify the transaction_id associated with the User '}) >> "%f%\app\user\resource.py"
echo     @api.expect(model_user) >> "%f%\app\user\resource.py"
echo     def put(self, user_id): >> "%f%\app\user\resource.py"
echo         try: >> "%f%\app\user\resource.py"
echo             json_data = request.json >> "%f%\app\user\resource.py"
echo             if not json_data: >> "%f%\app\user\resource.py"
echo                 return {'message': 'No input data provided'}, 400 >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo             return service.update(user_id, json_data) >> "%f%\app\user\resource.py"
echo         except KeyError as e: >> "%f%\app\user\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\user\resource.py"
echo         except Exception as e: >> "%f%\app\user\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\user\resource.py"
echo. >> "%f%\app\user\resource.py"
echo     @api.doc(responses={200: 'OK', 400: 'Invalid Argument', 500: 'Mapping Key Error'}, >> "%f%\app\user\resource.py"
echo                         params={'user_id': 'Specify the transaction_id associated with the User '}) >> "%f%\app\user\resource.py"
echo     def delete(self, user_id): >> "%f%\app\user\resource.py"
echo         try: >> "%f%\app\user\resource.py"
echo             return service.delete(user_id) >> "%f%\app\user\resource.py"
echo         except KeyError as e: >> "%f%\app\user\resource.py"
echo             api.abort(500, e.__doc__, status="Could not retrieve information", statusCode="500") >> "%f%\app\user\resource.py"
echo         except Exception as e: >> "%f%\app\user\resource.py"
echo             api.abort(400, e.__doc__, status="Could not retrieve information", statusCode="400") >> "%f%\app\user\resource.py"

cd %f%

python -m pipenv run python wsgi.py
